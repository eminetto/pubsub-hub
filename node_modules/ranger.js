// only ipV4 in digits, does CIDR too
var binary = function(ip) {
	var nums = ip.match(/(\d+)/g);

	nums = nums.map(function(num) {
		return parseInt(num, 10);
	});

	return nums[3] + (nums[2] << 8) + (nums[1] << 16) + (nums[0] << 24);
};
	
var prefix = function(ip) {
	var nums = ip.match(/(\d+)/g);
	return parseInt(nums[4] || 32,10);
};

var ranger = function(range) {
	var pre = prefix(range);
	var mask = (Math.pow(2,pre) - 1) << (32 - pre);

	if (range.indexOf('-') > -1) {
		var ips = range.split('-').map(binary);
	}

	range = binary(range);	
	mask = mask & range;

	return function(ip) {
		ip = binary(ip);

		if (!ips) {
			return (mask & ip) === mask;
		}
		
		if (ips[0] > ips[1]) {
			return ip > ips[1] && ip < ips[0];
		} else {
			return ip > ips[0] && ip < ips[1];
		}
	};
};

module.exports = ranger;